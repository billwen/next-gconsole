// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String    @id @default(cuid())
  username            String    @unique
  factoryUser         Boolean   @default(false)
  givenName           String?   @map("given_name")
  middleName          String?   @map("middle_name")
  familyName          String?   @map("family_name")
  password            String?
  salt                String?
  email               String?   @unique
  emailVerified       DateTime? @map("email_verified")
  phoneNumber         String?   @map("phone_number")
  phoneNumberVerified DateTime? @map("phone_number_verified")

  // Account status
  enabled Boolean @default(false)

  // Account expiration date
  expires         DateTime
  passwordExpires DateTime? @map("password_expires")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  image     String?
  imageData Bytes?    @map("image_data")
  accounts  Account[]
  sessions  Session[]

  // M-N relations
  roles UsersOnRoles[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Role {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  displayName String         @map("display_name")
  factoryRole Boolean        @default(false)
  description String?
  users       UsersOnRoles[]

  @@map("roles")
}

model UsersOnRoles {
  id Int @id @default(autoincrement())

  // relation scalar filed with the USER table
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])

  assignedAt         DateTime @default(now()) @map("assigned_at")
  assignedByUsername String?  @map("assigned_by_username")

  @@map("users_on_roles")
}
