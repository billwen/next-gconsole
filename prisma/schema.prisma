// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  String    @id @default(cuid())
  username            String    @unique
  builtIn             Boolean   @default(false)
  givenName           String?   @map("given_name")
  middleName          String?   @map("middle_name")
  familyName          String?   @map("family_name")
  password            String?
  salt                String?
  email               String?   @unique
  emailVerified       DateTime? @map("email_verified")
  phoneNumber         String?   @map("phone_number")
  phoneNumberVerified DateTime? @map("phone_number_verified")

  // Account status
  enabled Boolean @default(false)

  // Account expiration date
  expires         DateTime
  passwordExpires DateTime? @map("password_expires")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  avatarUrl  String? @map("avatar_url")
  avatarData Bytes?  @map("avatar_data")

  accounts Account[]
  sessions Session[]

  // M-N relations
  roles UsersOnRoles[]

  events AuditLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

//
// Hierarchical RBAC (Role Based Access Control) tables
//
model Role {
  id Int @id @default(autoincrement())

  slug     String @unique
  name     String
  // parent role, NULL means top level
  parentId Int?   @map("parent_id")

  description String?
  builtIn     Boolean  @default(false) @map("built_in")
  createdAt   DateTime @default(now()) @map("created_at")

  // relationship
  parentRole  Role?            @relation("ParentRole", fields: [parentId], references: [id])
  childRoles  Role[]           @relation("ParentRole")
  users       UsersOnRoles[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id Int @id @default(autoincrement())

  slug    String @unique
  module  String
  feature String
  name    String

  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  // relationship
  roles RolePermission[]

  @@map("permissions")
}

// Permission and Role M-N relation table
model RolePermission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  roleId       Int @map("role_id")
  permissionId Int @map("permission_id")

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UsersOnRoles {
  id         Int      @id @default(autoincrement())
  assignedAt DateTime @default(now()) @map("assigned_at")

  userId             String  @map("user_id")
  roleId             Int     @map("role_id")
  assignedByUsername String? @map("assigned_by_username")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@map("users_on_roles")
}

//
// Logs of audit
//
model AuditLog {
  username   String
  userId     String
  eventTs    DateTime @map("event_ts")
  system     String
  module     String
  event      String
  eventValue String
  details    Json?

  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}
